#!/usr/bin/env python
# coding: utf-8

# In[2]:


get_ipython().run_cell_magic('time', '', "import time\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport umap.umap_ as umap\nfrom sklearn.datasets import make_blobs\nimport numpy as np\n%matplotlib inline\nimport scipy\nimport time\nimport networkx as nx\nimport collections\nimport EoN\nfrom collections import defaultdict\nimport random\nimport pandas as pd\n\n\nsns.set(style='white', context='poster', rc={'figure.figsize':(8,6)})\n#default_seed = 16")


# In[1]:


get_ipython().run_cell_magic('time', '', '##BASELINE RUN\n## 1.25 million, E-I = 0.7, I-R = 0.3, IS-IE = 0.5, IC = 50\n\nstart = time.time()\ns = 1250000\narr = [int(0.2*s),int(0.05*s),int(0.1*s),int(0.16*s),int(0.12*s),int(0.1*s),int(0.04*s),int(0.08*s),int(0.15*s)]\ndata,y = make_blobs(n_samples=arr,n_features=2,random_state=16, cluster_std=1)\n\ntime1= time.time()\nprint("Data creation: ",time1-start)\n\nr = np.random.RandomState(10)\n\ncoo_matrix1 = umap.fuzzy_simplicial_set(data,30,r,\'euclidean\')\ncoo_matrix1 = np.asarray(coo_matrix1)\n\ntime2 = time.time()\nprint("Fuzzy simplicial:",time2-time1,"   ||| From start: ",time2-start)\n\n#repeat\nsparse_matrix = coo_matrix1[0]\n#print(sparse_matrix.getnnz())\n\nG1 = nx.from_scipy_sparse_matrix(sparse_matrix)\n\ntime3 = time.time()\nprint("Graph formation:",time3-time2,"   ||| From start: ",time3-start)\n#random.seed(0)\n#node_attribute_dict = {node: 0.5+random.random() for node in G1.nodes()}\n#nx.set_node_attributes(G1, values=node_attribute_dict, name=\'expose2infect_weight\')\n\nH1 = nx.DiGraph()\nH1.add_node(\'S\')\nH1.add_edge(\'E\', \'I\', rate = 0.7)\nH1.add_edge(\'I\', \'R\', rate = 0.3)\n\nJ1 = nx.DiGraph()\nJ1.add_edge((\'I\', \'S\'), (\'I\', \'E\'), rate = 0.5, weight_label=\'weight\')\nIC = defaultdict(lambda: \'S\')\nfor node in range(50):\n    IC[node] = \'I\'\n    \nreturn_statuses = (\'S\', \'E\', \'I\', \'R\')\n\nt, S, E, I, R = EoN.Gillespie_simple_contagion(G1, H1, J1, IC, return_statuses,\n                                        tmax = float(\'inf\'))\n\nplt.semilogy(t, S, label = \'Susceptible\')\nplt.semilogy(t, E, label = \'Exposed\')\nplt.semilogy(t, I, label = \'Infected\')\nplt.semilogy(t, R, label = \'Recovered\')\nplt.legend()\n\nplt.savefig(\'results/SEIR_1.25M_baseline.png\')\ntime4 = time.time()\nprint("SEIR:",time4-time3,"   ||| Total: ",time4-start)\n')


# In[2]:


get_ipython().run_cell_magic('time', '', '##TRANSMISSION RATE LOCKDOWN RUN\n## 1.25 million, E-I = 0.7, I-R = 0.3, IS-IE = 0.3 (lockdown), IC = 50\n\nstart = time.time()\ns = 1250000\narr = [int(0.2*s),int(0.05*s),int(0.1*s),int(0.16*s),int(0.12*s),int(0.1*s),int(0.04*s),int(0.08*s),int(0.15*s)]\ndata,y = make_blobs(n_samples=arr,n_features=2,random_state=16, cluster_std=1)\n\ntime1= time.time()\nprint("Data creation: ",time1-start)\n\nr = np.random.RandomState(10)\n\ncoo_matrix1 = umap.fuzzy_simplicial_set(data,30,r,\'euclidean\')\ncoo_matrix1 = np.asarray(coo_matrix1)\n\ntime2 = time.time()\nprint("Fuzzy simplicial:",time2-time1,"   ||| From start: ",time2-start)\n\n#repeat\nsparse_matrix = coo_matrix1[0]\n#print(sparse_matrix.getnnz())\n\nG1 = nx.from_scipy_sparse_matrix(sparse_matrix)\n\ntime3 = time.time()\nprint("Graph formation:",time3-time2,"   ||| From start: ",time3-start)\n#random.seed(0)\n#node_attribute_dict = {node: 0.5+random.random() for node in G1.nodes()}\n#nx.set_node_attributes(G1, values=node_attribute_dict, name=\'expose2infect_weight\')\n\nH1 = nx.DiGraph()\nH1.add_node(\'S\')\nH1.add_edge(\'E\', \'I\', rate = 0.7)\nH1.add_edge(\'I\', \'R\', rate = 0.3)\n\nJ1 = nx.DiGraph()\nJ1.add_edge((\'I\', \'S\'), (\'I\', \'E\'), rate = 0.3, weight_label=\'weight\')\nIC = defaultdict(lambda: \'S\')\nfor node in range(50):\n    IC[node] = \'I\'\n    \nreturn_statuses = (\'S\', \'E\', \'I\', \'R\')\n\nt, S, E, I, R = EoN.Gillespie_simple_contagion(G1, H1, J1, IC, return_statuses,\n                                        tmax = float(\'inf\'))\n\nplt.semilogy(t, S, label = \'Susceptible\')\nplt.semilogy(t, E, label = \'Exposed\')\nplt.semilogy(t, I, label = \'Infected\')\nplt.semilogy(t, R, label = \'Recovered\')\nplt.legend()\n\nplt.savefig(\'results/SEIR_1.25M_tr30%.png\')\ntime4 = time.time()\nprint("SEIR:",time4-time3,"   ||| Total: ",time4-start)')


# In[ ]:


get_ipython().run_cell_magic('time', '', '##SUPER-SPREADER REMOVAL 5%\n## 1.25 million, E-I = 0.7, I-R = 0.3, IS-IE = 0.5, IC = 50\n\nstart = time.time()\ns = 1250000\narr = [int(0.2*s),int(0.05*s),int(0.1*s),int(0.16*s),int(0.12*s),int(0.1*s),int(0.04*s),int(0.08*s),int(0.15*s)]\ndata,y = make_blobs(n_samples=arr,n_features=2,random_state=16, cluster_std=1)\n\ntime1= time.time()\nprint("Data creation: ",time1-start)\n\nr = np.random.RandomState(10)\n\ncoo_matrix1 = umap.fuzzy_simplicial_set(data,30,r,\'euclidean\')\ncoo_matrix1 = np.asarray(coo_matrix1)\n\ntime2 = time.time()\nprint("Fuzzy simplicial:",time2-time1,"   ||| From start: ",time2-start)\n\n#repeat\nsparse_matrix = coo_matrix1[0]\n#print(sparse_matrix.getnnz())\n\nG = nx.from_scipy_sparse_matrix(sparse_matrix)\n\ntime3 = time.time()\nprint("Graph formation:",time3-time2,"   ||| From start: ",time3-start)\n\n#########################################################################\nprint(f\'number of edges BEFORE reducing superspreader connections: {G.number_of_edges()}\') \nss = sorted(G.degree, key=lambda x: x[1], reverse=True)\nk1=round(5/100 * len(ss))  ## top 5 percent of highest degree nodes\nss1= [i[0] for i in ss]\nss_final = ss1[:k1]\n\nfor i in ss_final:\n    k2=round(80/100 * len(G.edges(i)))  ## removing random 80% edges/connections of each selected superspreader\n    list1 = list(G.edges(i))\n    to_remove=random.sample(list1,k2)\n    G.remove_edges_from(to_remove)\n    \ntime4 = time.time()\nprint(f\'number of edges AFTER reducing superspreader connections: {G.number_of_edges()}\') \nprint("reducing superspreader connections (80%):",time4-time3,"   ||| From start: ",time4-start)\n#########################################################################\n\n#random.seed(0)\n#node_attribute_dict = {node: 0.5+random.random() for node in G1.nodes()}\n#nx.set_node_attributes(G1, values=node_attribute_dict, name=\'expose2infect_weight\')\n\nH1 = nx.DiGraph()\nH1.add_node(\'S\')\nH1.add_edge(\'E\', \'I\', rate = 0.7)\nH1.add_edge(\'I\', \'R\', rate = 0.3)\n\nJ1 = nx.DiGraph()\nJ1.add_edge((\'I\', \'S\'), (\'I\', \'E\'), rate = 0.5, weight_label=\'weight\')\nIC = defaultdict(lambda: \'S\')\nfor node in range(50):\n    IC[node] = \'I\'\n    \nreturn_statuses = (\'S\', \'E\', \'I\', \'R\')\n\nt, S, E, I, R = EoN.Gillespie_simple_contagion(G, H1, J1, IC, return_statuses,\n                                        tmax = float(\'inf\'))\n\nplt.semilogy(t, S, label = \'Susceptible\')\nplt.semilogy(t, E, label = \'Exposed\')\nplt.semilogy(t, I, label = \'Infected\')\nplt.semilogy(t, R, label = \'Recovered\')\nplt.legend()\n\nplt.savefig(\'ss_5per.png\')\ntime5 = time.time()\nprint("SEIR:",time5-time4,"   ||| Total: ",time5-start)')

